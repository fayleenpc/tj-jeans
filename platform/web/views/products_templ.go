// Code generated by templ - DO NOT EDIT.

// templ: version: v0.2.778
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "github.com/fayleenpc/tj-jeans/internal/types"
import "github.com/fayleenpc/tj-jeans/platform/web/views/components"

var try_script_product_tile = templ.NewOnceHandle()

func Products(products []types.Product, username string, role string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Var2 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<div class=\"container\" id=\"products_page\"><header><div class=\"title\">DAFTAR PRODUK</div><div class=\"icon-cart\"><svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 18 20\"><path stroke=\"currentColor\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-width=\"2\" d=\"M6 15a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm0 0h8m-8 0-1-4m9 4a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm-9-4h10l2-7H3m2 7L3 4m0 0-.792-3H1\"></path></svg> <span>0</span></div></header><div class=\"listProduct\">")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			for _, product := range products {
				templ_7745c5c3_Err = components.Product_Tile(product).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("</div></div><div class=\"cartTab\"><h1>Keranjang Belanja</h1><div class=\"listCart\"></div><div class=\"btn\"><button class=\"close\">TUTUP</button> <button class=\"checkOut\">CHECKOUT</button></div></div><script>\r\n        let listProductHTML = document.querySelector('.listProduct');\r\n        let listCartHTML = document.querySelector('.listCart');\r\n        let iconCart = document.querySelector('.icon-cart');\r\n        let iconCartSpan = document.querySelector('.icon-cart span');\r\n        let body = document.querySelector('body');\r\n        let closeCart = document.querySelector('.close');\r\n        let products = [];\r\n        let cart = [];\r\n        let checkoutCart = document.querySelector('.checkOut');\r\n\r\n\r\n\r\n        let yippie = document.getElementsByClassName('yippie')\r\n    \r\n        function createToast(type, icon, title, text){\r\n            let newToast = document.createElement('div');\r\n            newToast.innerHTML = `\r\n                <div class=\"toast ${type}\">\r\n                    <i class=\"${icon}\"></i>\r\n                    <div class=\"content\">\r\n                        <div class=\"title\">${title}</div>\r\n                        <span>${text}</span>\r\n                    </div>\r\n                    <i class=\"fa-solid fa-xmark\" onclick=\"(this.parentElement).remove()\"></i>\r\n                </div>`;\r\n            notifications.appendChild(newToast);\r\n            newToast.timeOut = setTimeout(\r\n                ()=>newToast.remove(), 5000\r\n            )\r\n        }\r\n\r\n        iconCart.addEventListener('click', () => {\r\n            body.classList.toggle('showCart');\r\n        })\r\n\r\n        closeCart.addEventListener('click', () => {\r\n            body.classList.toggle('showCart');\r\n        })\r\n\r\n        checkoutCart.addEventListener('click', () => {\r\n            var messageForWhatsapp = ``\r\n            var total = 0\r\n\r\n            if (localStorage.getItem(\"cart\") != ``) {\r\n                fetch(\"/cart/checkout\", {\r\n                    method: \"POST\",\r\n                    body: `{ \"items\" : ${ JSON.stringify(cart) } }`,\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json; charset=UTF-8\"\r\n                    }\r\n                }).then(response => response.json())\r\n                .then(data => {\r\n                    console.log(data)\r\n                    if (data.error) {\r\n                        // alert(data.error)\r\n                        let type = 'warning';\r\n                        let icon = 'fa-solid fa-triangle-exclamation';\r\n                        let title = 'Simpan Keranjang Belanja Gagal';\r\n                        let text = 'Kamu harus login terlebih dahulu untuk melakukan penyimpanan pembelian.';\r\n                        createToast(type, icon, title, text);\r\n                    } \r\n                    else {\r\n                        let type = 'success';\r\n                        let icon = 'fa-solid fa-circle-check';\r\n                        let title = 'Simpan Keranjang Belanja Berhasil';\r\n                        let text = 'Kamu telah menyimpan barang pembelian dan melakukan checkout/pembelian ke payment xendit/midtrans.';\r\n                        createToast(type, icon, title, text);\r\n                        \r\n                    }\r\n                })\r\n            }\r\n        })\r\n\r\n\r\n\r\n        \r\n        listProductHTML.addEventListener('click', (event) => {\r\n            let positionClick = event.target;\r\n            \r\n            if(positionClick.classList.contains('addCart')){\r\n                let id_product = positionClick.parentElement.dataset.id;\r\n                \r\n                addToCart(id_product);\r\n            }\r\n        })\r\n        const addToCart = (product_id) => {\r\n            let positionThisProductInCart = cart.findIndex((value) => value.product_id == product_id);\r\n            if(cart.length <= 0){\r\n                cart = [{\r\n                    product_id: Number(product_id),\r\n                    qty: 1\r\n                }];\r\n            }else if(positionThisProductInCart < 0){\r\n                cart.push({\r\n                    product_id: Number(product_id),\r\n                    qty: 1\r\n                });\r\n            }else{\r\n                cart[positionThisProductInCart].qty = cart[positionThisProductInCart].qty + 1;\r\n            }\r\n            addCartToHTML();\r\n            addCartToMemory();\r\n        }\r\n        const addCartToMemory = () => {\r\n            localStorage.setItem('cart', JSON.stringify(cart));\r\n        }\r\n        const addCartToHTML = () => {\r\n            listCartHTML.innerHTML = '';\r\n            let totalQuantity = 0;\r\n            \r\n            if(cart.length > 0){\r\n                cart.forEach((item, index) => {\r\n                    totalQuantity = totalQuantity +  item.qty;\r\n                    let newItem = document.createElement('div');\r\n                    newItem.classList.add('item');\r\n                    newItem.dataset.id = item.product_id;\r\n\r\n                    let positionProduct = products.findIndex((value) => value.id == item.product_id);\r\n                    let info = products[positionProduct];\r\n                    listCartHTML.appendChild(newItem);\r\n                    newItem.innerHTML = `\r\n                    <div class=\"image\">\r\n                            <img src=\"/platform/web/static/${info.image}\">\r\n                        </div>\r\n                        <div class=\"name\">\r\n                        ${info.name}\r\n                        </div>\r\n                        <div class=\"totalPrice\">IDR ${info.price * item.qty}</div>\r\n                        <div class=\"quantity\">\r\n                            <span class=\"minus\"><</span>\r\n                            <span>${item.qty}</span>\r\n                            <span class=\"plus\">></span>\r\n                        </div>\r\n                    `;\r\n                    \r\n                    \r\n                })\r\n\r\n\r\n            }\r\n            iconCartSpan.innerText = totalQuantity;\r\n        }\r\n\r\n        listCartHTML.addEventListener('click', (event) => {\r\n            let positionClick = event.target;\r\n            if(positionClick.classList.contains('minus') || positionClick.classList.contains('plus')){\r\n                let product_id = positionClick.parentElement.parentElement.dataset.id;\r\n                let type = 'minus';\r\n                if(positionClick.classList.contains('plus')){\r\n                    type = 'plus';\r\n                }\r\n                changeQuantityCart(product_id, type);\r\n            }\r\n        })\r\n        const changeQuantityCart = (product_id, type) => {\r\n            let positionItemInCart = cart.findIndex((value) => value.product_id == product_id);\r\n            if(positionItemInCart >= 0){\r\n                let info = cart[positionItemInCart];\r\n                switch (type) {\r\n                    case 'plus':\r\n                        cart[positionItemInCart].quantity = cart[positionItemInCart].quantity + 1;\r\n                        break;\r\n                \r\n                    default:\r\n                        let changeQuantity = cart[positionItemInCart].quantity - 1;\r\n                        if (changeQuantity > 0) {\r\n                            cart[positionItemInCart].quantity = changeQuantity;\r\n                        }else{\r\n                            cart.splice(positionItemInCart, 1);\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n            addCartToHTML();\r\n            addCartToMemory();\r\n        }\r\n\r\n        const initApp = () => {\r\n            // get data product\r\n            fetch('/products/get')\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                // console.log(data)\r\n                products = data;\r\n                \r\n\r\n                // get data cart from memory\r\n                if(localStorage.getItem('cart')){\r\n                    cart = JSON.parse(localStorage.getItem('cart'));\r\n                    addCartToHTML();\r\n                }\r\n                addCart = document.querySelector('.addCart')\r\n                \r\n            })\r\n        }\r\n\r\n\r\n        initApp();\r\n\r\n    </script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return templ_7745c5c3_Err
		})
		templ_7745c5c3_Err = Page(true, username, role).Render(templ.WithChildren(ctx, templ_7745c5c3_Var2), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Var3 := templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
			templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
			templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
			if !templ_7745c5c3_IsBuffer {
				defer func() {
					templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
					if templ_7745c5c3_Err == nil {
						templ_7745c5c3_Err = templ_7745c5c3_BufErr
					}
				}()
			}
			ctx = templ.InitializeContext(ctx)
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString("<script>\r\n        function addCartTransition() {\r\n            addActiveClass(document.querySelector('.icon-cart'), 'yippie');setTimeout(() => removeActiveClass(document.querySelector('.icon-cart'), 'yippie'),700)\r\n        }\r\n    </script>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			return templ_7745c5c3_Err
		})
		templ_7745c5c3_Err = try_script_product_tile.Once().Render(templ.WithChildren(ctx, templ_7745c5c3_Var3), templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return templ_7745c5c3_Err
	})
}

var _ = templruntime.GeneratedTemplate
