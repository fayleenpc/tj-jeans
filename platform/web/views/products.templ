package views

import "github.com/fayleenpc/tj-jeans/internal/types"
import "github.com/fayleenpc/tj-jeans/platform/web/views/components"

var try_script_product_tile = templ.NewOnceHandle()

templ Products(products []types.Product, username string, role string) {
    @Page(true, username, role) {
    <div class="container" id="products_page">
    <header>
        <div class="title">DAFTAR PRODUK</div>
        <div class="icon-cart">
            <svg aria-hidden="true" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 18 20">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 15a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm0 0h8m-8 0-1-4m9 4a2 2 0 1 0 0 4 2 2 0 0 0 0-4Zm-9-4h10l2-7H3m2 7L3 4m0 0-.792-3H1"/>
            </svg>
            <span>0</span>
        </div>
    </header>
    <div class="listProduct">
        for _, product := range products {
            @components.Product_Tile(product)
        }
    </div>
    
    </div>

    <div class="cartTab">
        <h1>Keranjang Belanja</h1>
        <div class="listCart">
            
        </div>
        <div class="btn">
            <button class="close">TUTUP</button>
            <button class="checkOut">CHECKOUT</button>
        </div>
    </div>
    
    <script>
        let listProductHTML = document.querySelector('.listProduct');
        let listCartHTML = document.querySelector('.listCart');
        let iconCart = document.querySelector('.icon-cart');
        let iconCartSpan = document.querySelector('.icon-cart span');
        let body = document.querySelector('body');
        let closeCart = document.querySelector('.close');
        let products = [];
        let cart = [];
        let checkoutCart = document.querySelector('.checkOut');



        let yippie = document.getElementsByClassName('yippie')
    
        function createToast(type, icon, title, text){
            let newToast = document.createElement('div');
            newToast.innerHTML = `
                <div class="toast ${type}">
                    <i class="${icon}"></i>
                    <div class="content">
                        <div class="title">${title}</div>
                        <span>${text}</span>
                    </div>
                    <i class="fa-solid fa-xmark" onclick="(this.parentElement).remove()"></i>
                </div>`;
            notifications.appendChild(newToast);
            newToast.timeOut = setTimeout(
                ()=>newToast.remove(), 5000
            )
        }

        iconCart.addEventListener('click', () => {
            body.classList.toggle('showCart');
        })

        closeCart.addEventListener('click', () => {
            body.classList.toggle('showCart');
        })

        checkoutCart.addEventListener('click', () => {
            var messageForWhatsapp = ``
            var total = 0

            if (localStorage.getItem("cart") != ``) {
                fetch("/cart/checkout", {
                    method: "POST",
                    body: `{ "items" : ${ JSON.stringify(cart) } }`,
                    headers: {
                        "Content-Type": "application/json; charset=UTF-8"
                    }
                }).then(response => response.json())
                .then(data => {
                    console.log(data)
                    if (data.error) {
                        // alert(data.error)
                        let type = 'warning';
                        let icon = 'fa-solid fa-triangle-exclamation';
                        let title = 'Simpan Keranjang Belanja Gagal';
                        let text = 'Kamu harus login terlebih dahulu untuk melakukan penyimpanan pembelian.';
                        createToast(type, icon, title, text);
                    } 
                    else {
                        let type = 'success';
                        let icon = 'fa-solid fa-circle-check';
                        let title = 'Simpan Keranjang Belanja Berhasil';
                        let text = 'Kamu telah menyimpan barang pembelian dan melakukan checkout/pembelian ke payment xendit/midtrans.';
                        createToast(type, icon, title, text);
                        
                    }
                })
            }
        })



        
        listProductHTML.addEventListener('click', (event) => {
            let positionClick = event.target;
            
            if(positionClick.classList.contains('addCart')){
                let id_product = positionClick.parentElement.dataset.id;
                
                addToCart(id_product);
            }
        })
        const addToCart = (product_id) => {
            let positionThisProductInCart = cart.findIndex((value) => value.product_id == product_id);
            if(cart.length <= 0){
                cart = [{
                    product_id: Number(product_id),
                    qty: 1
                }];
            }else if(positionThisProductInCart < 0){
                cart.push({
                    product_id: Number(product_id),
                    qty: 1
                });
            }else{
                cart[positionThisProductInCart].qty = cart[positionThisProductInCart].qty + 1;
            }
            addCartToHTML();
            addCartToMemory();
        }
        const addCartToMemory = () => {
            localStorage.setItem('cart', JSON.stringify(cart));
        }
        const addCartToHTML = () => {
            listCartHTML.innerHTML = '';
            let totalQuantity = 0;
            
            if(cart.length > 0){
                cart.forEach((item, index) => {
                    totalQuantity = totalQuantity +  item.qty;
                    let newItem = document.createElement('div');
                    newItem.classList.add('item');
                    newItem.dataset.id = item.product_id;

                    let positionProduct = products.findIndex((value) => value.id == item.product_id);
                    let info = products[positionProduct];
                    listCartHTML.appendChild(newItem);
                    newItem.innerHTML = `
                    <div class="image">
                            <img src="/platform/web/static/${info.image}">
                        </div>
                        <div class="name">
                        ${info.name}
                        </div>
                        <div class="totalPrice">IDR ${info.price * item.qty}</div>
                        <div class="quantity">
                            <span class="minus"><</span>
                            <span>${item.qty}</span>
                            <span class="plus">></span>
                        </div>
                    `;
                    
                    
                })


            }
            iconCartSpan.innerText = totalQuantity;
        }

        listCartHTML.addEventListener('click', (event) => {
            let positionClick = event.target;
            if(positionClick.classList.contains('minus') || positionClick.classList.contains('plus')){
                let product_id = positionClick.parentElement.parentElement.dataset.id;
                let type = 'minus';
                if(positionClick.classList.contains('plus')){
                    type = 'plus';
                }
                changeQuantityCart(product_id, type);
            }
        })
        const changeQuantityCart = (product_id, type) => {
            let positionItemInCart = cart.findIndex((value) => value.product_id == product_id);
            if(positionItemInCart >= 0){
                let info = cart[positionItemInCart];
                switch (type) {
                    case 'plus':
                        cart[positionItemInCart].quantity = cart[positionItemInCart].quantity + 1;
                        break;
                
                    default:
                        let changeQuantity = cart[positionItemInCart].quantity - 1;
                        if (changeQuantity > 0) {
                            cart[positionItemInCart].quantity = changeQuantity;
                        }else{
                            cart.splice(positionItemInCart, 1);
                        }
                        break;
                }
            }
            addCartToHTML();
            addCartToMemory();
        }

        const initApp = () => {
            // get data product
            fetch('/api/v1/products')
            .then(response => response.json())
            .then(data => {
                // console.log(data)
                products = data;
                

                // get data cart from memory
                if(localStorage.getItem('cart')){
                    cart = JSON.parse(localStorage.getItem('cart'));
                    addCartToHTML();
                }
                addCart = document.querySelector('.addCart')
                
            })
        }


        initApp();

    </script>
    }

    @try_script_product_tile.Once() {
    <script>
        function addCartTransition() {
            addActiveClass(document.querySelector('.icon-cart'), 'yippie');setTimeout(() => removeActiveClass(document.querySelector('.icon-cart'), 'yippie'),700)
        }
    </script>
    }

    
}